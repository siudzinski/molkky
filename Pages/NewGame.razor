@page "/"
@using Domain;
@using Infrastructure;
@inject NavigationManager NavigationManager

<PageTitle>New game</PageTitle>

<div class="container">
    <h1 class="text-center">New Game</h1>

    <div class="row justify-content-center">
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Enter player name" @bind="playerName" />
                    <div class="input-group-append">
                        <Button Color="ButtonColor.Dark" @onclick="AddPlayer">Add</Button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-6 mt-3">
            <h2>Players:</h2>
            <ul class="list-group">
                @foreach (var player in playerNames)
                {
                    <li class="list-group-item">@player</li>
                }
            </ul>
        </div>
    </div>

    <div class="d-grid gap-2 mt-3">
        <Button Color="ButtonColor.Dark" @onclick="StartGame" Disabled="@StartGameDisabled"> Start Game </Button>
    </div>
</div>

@code {
    private string? playerName;
    private List<string> playerNames = new List<string>();
    private bool StartGameDisabled => playerNames.Count < 2;

    [Inject]
    private GameSessionStorage? GameStorage { get; set; }

    private void AddPlayer()
    {
        if (!string.IsNullOrWhiteSpace(playerName))
        {
            playerNames.Add(playerName);
            playerName = string.Empty;
        }
    }

    private async Task StartGame()
    {
        if(GameStorage is not null)
        {
            var game = Game.CreateNew(playerNames.Select(name => Player.CreateNew(name)));
            await GameStorage.SaveGameState(game);
        }

        playerNames.Clear();
        playerName = string.Empty;

        NavigationManager.NavigateTo("gameplay");
    }
}
