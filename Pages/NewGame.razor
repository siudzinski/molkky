@page "/"
@using Domain;
@using Infrastructure;
@inherits TranslatableComponentBase
@inject NavigationManager NavigationManager

<PageTitle>@Translator.Get("NewGameLabel")</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@Translator.Get("NewGameLabel")</MudText>
        </MudItem>
        @foreach(var name in playerNames)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudChip Class="full-width-chip" Size="Size.Large" Color="Color.Primary" OnClick="@(() => RemovePlayer(name))">
                    <MudAvatar Size="Size.Large" Color="Color.Tertiary">@name.Substring(0, 1).ToUpper()</MudAvatar>
                    @name
                </MudChip>
            </MudItem>
        }
        <MudItem xs="12" sm="12" md="12">
            <MudTextField @bind-Value="playerName" Label="@Translator.Get("EnterPlayerNameLabel")" Variant="Variant.Outlined" 
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.PersonOutline"
                          @onkeyup="HandleKeyPress" />
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="AddPlayer">@Translator.Get("AddPlayerButton")</MudButton>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudButton Variant="Variant.Filled" OnClick="StartGame" FullWidth="true" Color="Color.Primary" Disabled="@StartGameDisabled">@Translator.Get("StartGameButton")</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string? playerName;
    private List<string> playerNames = new List<string>();
    private bool StartGameDisabled => playerNames.Count < 2;

    [Inject]
    private GameSessionStorage? GameStorage { get; set; }
    [Inject]
    private SettingsSessionStorage? SettingsStorage { get; set; }

    private void AddPlayer()
    {
        if (!string.IsNullOrWhiteSpace(playerName))
        {
            playerNames.Add(playerName);
            playerName = string.Empty;
        }
    }

    private void RemovePlayer(string name)
    {
        playerNames.Remove(name);
    }

    private async Task StartGame()
    {
        if(GameStorage is not null && SettingsStorage is not null)
        {
            var (maximumPointsStrategy, missedThrowsStrategy) = await SettingsStorage.LoadSettingsState();
            var players = playerNames.OrderBy(_ => new Random().Next()).Select(name => Player.CreateNew(name));
            var game = Game.CreateNew(players, maximumPointsStrategy, missedThrowsStrategy);
            await GameStorage.SaveGameState(game);
        }

        playerNames.Clear();
        playerName = string.Empty;

        NavigationManager.NavigateTo("gameplay");
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddPlayer();
        }
    }
}
