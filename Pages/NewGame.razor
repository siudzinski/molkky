@page "/"
@using Domain;
@using Infrastructure;
@inject NavigationManager NavigationManager

<PageTitle>New game</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">New Game</MudText>
        </MudItem>
        @foreach(var name in playerNames)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudChip Class="full-width-chip" Size="Size.Large" Color="Color.Primary" OnClick="@(() => RemovePlayer(name))">
                    <MudAvatar Size="Size.Large" Color="Color.Tertiary">@name.Substring(0, 1).ToUpper()</MudAvatar>
                    @name
                </MudChip>
            </MudItem>
        }
        <MudItem xs="12" sm="12" md="12">
            <MudTextField @bind-Value="playerName" Label="Enter player name" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.PersonOutline" />
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="AddPlayer">Add</MudButton>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudButton Variant="Variant.Filled" OnClick="StartGame" FullWidth="true" Color="Color.Primary" Disabled="@StartGameDisabled">Start Game</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string? playerName;
    private List<string> playerNames = new List<string>();
    private bool StartGameDisabled => playerNames.Count < 2;

    [Inject]
    private GameSessionStorage? GameStorage { get; set; }
    [Inject]
    private SettingsSessionStorage? SettingsStorage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(SettingsStorage is not null)
        {
            await SettingsStorage.InitSettingsState();
        }
    }

    private void AddPlayer()
    {
        if (!string.IsNullOrWhiteSpace(playerName))
        {
            playerNames.Add(playerName);
            playerName = string.Empty;
        }
    }

    private void RemovePlayer(string name)
    {
        playerNames.Remove(name);
    }

    private async Task StartGame()
    {
        if(GameStorage is not null && SettingsStorage is not null)
        {
            var maximumPointsStrategy = await SettingsStorage.LoadSettingsState();
            var game = Game.CreateNew(playerNames.Select(name => Player.CreateNew(name)), maximumPointsStrategy);
            await GameStorage.SaveGameState(game);
        }

        playerNames.Clear();
        playerName = string.Empty;

        NavigationManager.NavigateTo("gameplay");
    }
}
