@page "/gameplay"
@using Domain;
@using Infrastructure;

<PageTitle>Game</PageTitle>

<MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudGrid Justify="Justify.FlexEnd" Spacing="0">
                <MudItem>
                    <MudIcon Icon="@Icons.Material.Filled.Alarm" />
                </MudItem>
                <MudItem>
                    <MudText>Round: @game?.RoundNumber</MudText>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="p-2" Elevation="1">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Align="Align.Center">Player: @game?.CurrentPlayer?.Name</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <Keyboard OnScoreAdded="AddScore" />
        <MudDivider />
        @if(game is not null)
        {
            @foreach (var player in game.Players)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="4">
                                    <MudAvatar Size="Size.Large" Color="Color.Tertiary">@player.Name.Substring(0, 1).ToUpper()</MudAvatar>
                                </MudItem>
                                <MudItem xs="8">
                                    <MudGrid>
                                        <MudItem xs="8">
                                            <MudText Typo="Typo.h6">@player.Name</MudText>
                                            <MudText>Score: @player.Score</MudText>
                                        </MudItem>
                                        <MudItem xs="4" >
                                            @if (player.InDanger)
                                            {
                                                @for(int i = 0; i < player.NumberOfFailedThrows; i++)
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                                }
                                            }
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
            @if(game.Losers.Any())
            {
                <MudDivider />
                @foreach (var loser in game.Losers)
                {
                    <MudItem xs="12" sm="6" md="4">
                    <MudChip Disabled="true" Class="full-width-chip" Size="Size.Large" Color="Color.Default">
                        <MudAvatar Size="Size.Large" Color="Color.Tertiary">@loser.Name.Substring(0, 1).ToUpper()</MudAvatar>
                        @loser.Name
                    </MudChip>
                </MudItem>
                }
            }
        }
    </MudGrid>
    <MudOverlay Visible="@IsOverlayVisible" DarkBackground="true" Absolute="true">
        <MudPaper Class="pa-4" Elevation="3" Square="false">
            <MudGrid>
                <MudItem xs="2">
                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" Style="color: gold;" />
                </MudItem>
                <MudItem xs="8">
                    <MudText Align="Align.Center" Typo="Typo.h5">@game?.Winner?.Name won the game!</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" Style="color: gold;" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudOverlay>
</MudContainer>

@code {
    private Game? game;
    private bool IsOverlayVisible => game?.AnyWinner ?? false;

    [Inject]
    private GameSessionStorage? GameStorage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(GameStorage is not null)
        {
            game = await GameStorage.LoadGameState();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(GameStorage is not null)
        {
            await GameStorage.SaveGameState(game);
        }
    }

    private void AddScore(int score)
    {
        if(game is not null)
        {
            game.SetThrowScoreForCurrentPlayer(score);
        }
    }
}
