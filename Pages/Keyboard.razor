@inject IDialogService DialogService

@for (int i = 0; i < 12; i++)
{
    var score = i;
    <MudItem xs="4" sm="4" md="4">
        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="() => HandleOnScoreAdded(score)">@score</MudButton>
    </MudItem>
}
<MudItem xs="12" sm="12" md="12">
    <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="() => HandleOnScoreAdded(12)">12</MudButton>
</MudItem>

@code {
    [Parameter]
    public EventCallback<int> OnScoreAdded { get; set; }

    private async Task HandleOnScoreAdded(int score)
    {
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.Score, score);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirmation", parameters, options);
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            await OnScoreAdded.InvokeAsync(score);
        }
    }
}