@page "/endgame"
@using molkky.Domain
@using molkky.Infrastructure
@inherits TranslatableComponentBase
@inject NavigationManager NavigationManager

<PageTitle>@Translator.Get("EndgameLabel")</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="2">
            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" Style="color: gold;" />
        </MudItem>
        <MudItem xs="8">
            <MudText Align="Align.Center" Typo="Typo.h5">@Winner @Translator.Get("WinnerHeaderText")!</MudText>
        </MudItem>
        <MudItem xs="2">
            <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" Style="color: gold;" />
        </MudItem>
        <MudItem xs="12">
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" ChartOptions="@Options" Width="100%" CanHideSeries/>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="PlayAgain">@Translator.Get("PlayAgainLabel")</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="NewGame">@Translator.Get("NewGameLabel")</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Inject]
    private GameSessionStorage? GameStorage { get; set; }

    private Game? game;
    
    public string Winner = string.Empty;
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = Array.Empty<string>();
    public ChartOptions Options = new ChartOptions() { YAxisTicks = 1 };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if(GameStorage is null) return;
        
        game = await GameStorage.LoadGameState();
        var stats = game?.ToStats();

        if (stats is null) return;
        
        var players = new List<ChartSeries>();
        foreach (var player in stats.Players)
        {
            players.Add(new ChartSeries 
            { 
                Name = player.Name, 
                Data = player.ScoreHistory
            });
        }

        Series = players;
        XAxisLabels = stats.Rounds;
        Winner = stats.Winner;
    }

    private void NewGame()
    {
        NavigationManager.NavigateTo("");
    }

    private async Task PlayAgain()
    {
        if(game is not null && GameStorage is not null)
        {
            game.PlayAgain();
            await GameStorage.SaveGameState(game);
            NavigationManager.NavigateTo("gameplay");
        }
    }
}